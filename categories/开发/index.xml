<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>开发 - 分类 - 须远</title>
        <link>https://wxiang.cc/categories/%E5%BC%80%E5%8F%91/</link>
        <description>开发 - 分类 - 须远</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>itwangxiang@gmail.com (Me)</managingEditor>
            <webMaster>itwangxiang@gmail.com (Me)</webMaster><lastBuildDate>Tue, 05 Nov 2019 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://wxiang.cc/categories/%E5%BC%80%E5%8F%91/" rel="self" type="application/rss+xml" /><item>
    <title>Kotlin 常用语法</title>
    <link>https://wxiang.cc/kotlin/</link>
    <pubDate>Tue, 05 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://wxiang.cc/kotlin/</guid>
    <description><![CDATA[官方文档 - en / zh-cn
 惯用语法 - en / zh-cn
  基础 基础语法   包
1 2  package my.demo import kotlin.text.*     函数
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  fun sum(a: Int, b: Int): Int { return a + b } //表达式作为函数体，返回类型自动推断 fun sum(a: Int, b: Int) = a + b //无返回值的函数 fun printSum(a: Int, b: Int): Unit { println(&#34;sum of $aand $bis ${a + b}&#34;) } //Unit 返回类型可以省略 fun printSum(a: Int, b: Int) { println(&#34;sum of $aand $bis ${a + b}&#34;) }     变量]]></description>
</item><item>
    <title>Flutter 初体验</title>
    <link>https://wxiang.cc/flutter/</link>
    <pubDate>Tue, 05 Mar 2019 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://wxiang.cc/flutter/</guid>
    <description><![CDATA[基础 安装  window   PATH environment
1 2 3 4 5 6 7 8  # 临时设置环境 $Env:path += &#34;;D:\_SDK\flutter\bin&#34; # 授权系统执行脚本权限 $set-executionpolicy remotesigned # 为当前用户设置环境 $Add-Content -Path $Profile.CurrentUserAllHosts -Value &#39;$Env:Path += &#34;;D:\_SDK\flutter\bin&#34;&#39;       ]]></description>
</item><item>
    <title>Golang 编译命令</title>
    <link>https://wxiang.cc/golang/</link>
    <pubDate>Wed, 18 Apr 2018 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://wxiang.cc/golang/</guid>
    <description><![CDATA[交叉编译 Mac 下编译
1 2  CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go   Linux 下编译
1 2 3 4  # mac CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go # windows CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go   Windows 下编译
1 2 3 4 5 6 7 8 9 10 11  # mac SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go #linux SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.]]></description>
</item><item>
    <title>Java 开发大纲</title>
    <link>https://wxiang.cc/java/</link>
    <pubDate>Thu, 25 Aug 2016 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://wxiang.cc/java/</guid>
    <description><![CDATA[集合 非线程安全集合  List: 有序集合  ArrayList  数据结构：基于泛型数组 特点：查询速度快，增删速度慢   LinkedList  数据结构：基于链表结构 特点：查询速度慢，增删速度快     Map: 将键映射到值的双列集合  HashMap  数据结构： 基于哈希表 特点：存取无序 源码  DEFAULT_INITIAL_CAPACITY 默认为 16 MAXIMUM_CAPACITY 默认为 2 的 30 次幂 DEFAULT_LOAD_FACTOR 默认负载因子 0.75 每次会扩容长度为以前的2倍     TreeMap  有序 数据结构 -&gt; 基于红黑树   LinkedHashMap  数据结构： 基于链表和哈希表 特点：存取有序   EnumMap:  特点：枚举类型作为键值的Map   IdentityHashMap:  特点：使用 “==” 来比较引用   WeakHashMap:  特点：将键存储在 WeakReference 中 场景：用于数据缓存中     Set: 不能包含重复元素的集合  HashSet:  数据结构： 基于哈希表 特点：存取无序   TreeSet  数据结构： 基于二叉树 特点：排序   LinkedHashSet  数据结构： 基于链表和哈希表 特点：存取有序   EnumSet:  特点：值为枚举类型的Set   BitSet   Queue/Deque: 队列  ArrayDeque  特点：基于有首尾指针的数组（环形缓冲区）   PriorityQueue  特点：基于优先级的队列      线程安全集合  List  CopyOnWriteArrayList  特点：避免了多线程操作的线程安全问题 原理：先复制，再操作，最后替换 场景：用在遍历操作比更新操作多的集合，比如 listeners / observers 集合     Queue/Deque  ArrayBlockingQueue  特点：基于数组实现的一个有界阻塞队，大小不能重新定义   ConcurrentLinkedQueue  特点：基于链表实现的无界队列   DelayQueue LinkedBlockingQueue / LinkedBlockingDeque  特点：可选择有界或者无界基于链表的实现   LinkedTransferQueue  特点：基于链表的无界队列   SynchronousQueue  特点：有界队列     Map  ConcurrentHashMap ConcurrentSkipListMap  并发有序     Set  ConcurrentSkipListSet CopyOnWriteArraySet    并发 线程   创建]]></description>
</item></channel>
</rss>
