<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>命令 - 标签 - 须远</title><link>https://kimliss.github.io/tags/%E5%91%BD%E4%BB%A4/</link><description>命令 - 标签 - 须远</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>kimliss@gmail.com (须远)</managingEditor><webMaster>kimliss@gmail.com (须远)</webMaster><lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://kimliss.github.io/tags/%E5%91%BD%E4%BB%A4/" rel="self" type="application/rss+xml"/><item><title>ADB 常用命令</title><link>https://kimliss.github.io/adb/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/adb/</guid><description><![CDATA[常规 1 2 3 4 5 6 7 8  adb tcpip 5555 //设置远程设备监听端口 adb connect ip:port //连接远程设备 adb -s 20b5c60c shell ifconfig wlan0 //查看 IP adb reconnect //重新连接设备 adb shell am start -n ｛package｝/.{activity} //启动程序 adb shell setprop persist.service.adb.tcp.port 5555 //设置系统重启后，远程设备监听端口 adb shell wifitest -z &#34;W 00:1f:2e:3d:4c:5b&#34; //设置 WI-FI MAC adb shell wifitest -z &#34;B 00:1f:2e:3d:4c:5b&#34; //设置 蓝牙 MAC   ]]></description></item><item><title>Centos 常用命令</title><link>https://kimliss.github.io/centos/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/centos/</guid><description><![CDATA[Shadowsocks 安装 1 2  yum install python-setuptools &amp;&amp; easy_install pip pip install shadowsocks   使用 1 2 3 4  ssserver -p 443 -k password -m rc4-md5 # 前台启动 sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start # 后台启动 sudo ssserver -d stop # 停止 sudo less /var/log/shadowsocks.log # 查看日志   注：使用配置文件 创建配置文件 /etc/shadowsocks.json ，例如：
1 2 3 4 5 6 7 8 9 10  { &#34;server&#34;:&#34;my_server_ip&#34;, &#34;server_port&#34;:8388, &#34;local_address&#34;: &#34;127.]]></description></item><item><title>Linux 常用命令</title><link>https://kimliss.github.io/linux/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/linux/</guid><description>常用命令 1 2 3 4 5 6 7 8 rm -rf a.txt ##删除 cp b.txt a.txt ##复制文件 mv a.txt b.txt ##修改文件名 nohup ping todev.cn &amp;amp; ## 后台任务 jobs -l ## 查看后台任务, num,pid kill %num ## 杀掉后台任务，根据编号 ps -aux | grep &amp;#34;****&amp;#34; ## 查看相关进程 kill pid ## 杀掉进程，根据pid 设置文件权限 1 2 3 4 5 6 7 8 chmod 777 test.txt # 设置 test.txt 文件为所有用户都有读、写、执行权限 -rw------- (600) 只有拥有者有读写权限。 -rw-r--r-- (644) 只有拥有者有读写权限；而属组用户和其他用户只有读权限。 -rwx------ (700) 只有拥有者有读、写、执行权限。 -rwxr-xr-x (755) 拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。 -rwx--x--x (711) 拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。 -rw-rw-rw- (666) 所有用户都有文件读、写权限。 -rwxrwxrwx (777) 所有用户都有读、写、执行权限。 环境配置 1 2 3 4 # 编辑 vi ~/.</description></item><item><title>Mac 常用命令</title><link>https://kimliss.github.io/mac/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/mac/</guid><description>Mac 用户环境变量 bash 1 2 3 4 5 6 7 vim ~/.bash_profile export ANDROID_HOME=/Users/xxx/Library/Android/sdk export PATH=${PATH}:${ANDROID_HOME}/tools export PATH=${PATH}:${ANDROID_HOME}/platform-tools source .bash_profile zsh 1 2 3 4 5 6 7 vim ~/.zshrc export ANDROID_HOME=/Users/xxx/Library/Android/sdk export PATH=${PATH}:${ANDROID_HOME}/tools export PATH=${PATH}:${ANDROID_HOME}/platform-tools source .zshrc</description></item><item><title>Ubuntu 常用命令</title><link>https://kimliss.github.io/ubuntu/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/ubuntu/</guid><description><![CDATA[apt 常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  apt-cache search package # 搜索包 apt-cache show package # 获取包的相关信息，如说明、大小、版本等 sudo apt-get install package # 安装包 sudo apt-get install package - - reinstall # 重新安装包 sudo apt-get -f install # 修复安装&#34;-f = ——fix-missing&#34; sudo apt-get remove package # 删除包 sudo apt-get remove package - - purge # 删除包，包括删除配置文件等 sudo apt-get update # 更新源 sudo apt-get upgrade # 更新已安装的包 sudo apt-get dist-upgrade # 升级系统 sudo apt-get dselect-upgrade # 使用 dselect 升级 apt-cache depends package # 了解使用依赖 apt-cache rdepends package # 是查看该包被哪些包依赖 sudo apt-get build-dep package # 安装相关的编译环境 apt-get source package # 下载该包的源代码 sudo apt-get clean &amp;&amp; sudo apt-get autoclean # 清理无用的包 sudo apt-get check # 检查是否有损坏的依赖   常见问题 修改密码 1  sudo passwd root   中文乱码 1 2 3 4 5 6  locale # 查看是否中文 locale-gen zh_CN.]]></description></item><item><title>Windows 常用命令</title><link>https://kimliss.github.io/windows/</link><pubDate>Mon, 15 Apr 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/windows/</guid><description><![CDATA[开发环境 使用 Scoop 搭建开发环境
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67  ######################################################### ################## Scoop Install ################# ######################################################### ##### Set ExecutionPolicy Set-ExecutionPolicy RemoteSigned -scope CurrentUser ##### Custom Path $env:SCOOP=&#39;D:\wxiang\Scoop&#39; [environment]::setEnvironmentVariable(&#39;SCOOP&#39;,$env:SCOOP,&#39;User&#39;) iwr -useb get.]]></description></item><item><title>Git 常用命令</title><link>https://kimliss.github.io/git/</link><pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/git/</guid><description>摘录 - 常用 Git 命令清单
关系图 名词 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库 新建代码库 1 2 3 4 5 6 7 8 # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史 $ git clone [url] 配置 1 2 3 4 5 6 7 8 9 10 11 12 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.</description></item><item><title>Vim 常用命令</title><link>https://kimliss.github.io/vim/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/vim/</guid><description><![CDATA[vimtutor zh_CN 进入《Vim 使用教程》
   模式  ESC 返回正常模式 v 进入可视模式 R 进入替换模式  进入与退出   进入:
 vim 文件名 &lt;回车&gt; 普通进入 sudo vim 文件名 &lt;回车&gt; 管理员进入    退去:
 :q! 取消所有改动并退出 :wq 保存改动并退出    命令和对象 许多改变文本的命令都由一个操作符和一个动作构成 在正常模式下修改命令的格式是：
operator [number] motion
其中：
 operator 操作符，代表要做的事情，比如 d 代表删除 [number] 可以附加的数字，代表动作重复的次数 motion 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，$ 代表行末等等  撤销  u 撤销之前的操作 U 撤销在一行中所做的改动 CTRL-R 撤销之前的撤销命令  滚屏  CTRL-f 向上滚动一屏 CTRL-b 向下滚动一屏 CTRL-d 向下滚动半屏 CTRL-u 向上滚动半屏 CTRL-e 向上滚动一行 CTRL-y 向下滚动一行 zz 将当前行移动到屏幕中央 zt 将当前行移动到屏幕顶部 zb 将当前行移动到屏幕底部  定位及文件状态  G 使当前光标跳转到文件最后一行 gg 使当前光标跳转到文件第一行 CTRL-G 显示当前编辑的文件名和文件中光标位置  移动  k 向上移动光标 j 向下移动光标 h 向左移动光标 l 向右移动光标 0 移动光标到行首 ^ 移动光标到行首-非空字符 $ 移动光标到行末 w 移动光标到下一个单词的开头 e 移动光标到下一个单词的末尾 b 移动光标到上一个单词的开头 ge 移动光标到上一个单词的开头 H 移动到屏幕顶部 L 移动到屏幕低部 :5 移动到第5行 5| 移动到第5列  插入  i 从当前光标之前插入 a 从当前光标之后插入 I 从当前光标所在行首处插入 A 从当前光标所在行的末尾插入 o 在光标下方新的一行插入 O 在光标上方新的一行插入  删除  x 删除当前光标字符 dw 删除当前光标至下一个单词 d$ 或 D 删除当前光标至整行的末尾 dd 删除整行  复制  v 进入可视模式，移动光标选择要复制的字符 y 复制高亮的文本 yw 复制一个单词 y$ 复制当前光标至整行的末尾 yy 复制当前光标所在行  置入  p 将最后一次删除的内容置入光标之后  更改  ch 以输入的文本替代前一个光标 cl 或 s 以输入的文本替代当前光标 cc 或 S 修改当前行 ce 以输入的文本替代光标所在单词的末尾 C 以输入的文本替代光标到所在行的末尾  替换  r [替换字符] 将当前光标所在位置的字符替换掉 R [替换字符…] 将当前光标所在位置的字符连续替换掉 :s/old/new 在一行内替换头一个字符串 old 为新的字符串 new :s/old/new/s 在一行内替换所有到字符串 old 为新的字符串 new :#,#s/old/new/g 在两行内替换所有到字符串 old 为新的字符串 new.]]></description></item><item><title>Golang 编译命令</title><link>https://kimliss.github.io/golang/</link><pubDate>Wed, 18 Apr 2018 00:00:00 +0000</pubDate><author>作者</author><guid>https://kimliss.github.io/golang/</guid><description>交叉编译 Mac 下编译
1 2 CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Linux 下编译
1 2 3 4 # mac CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build main.go # windows CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build main.go Windows 下编译
1 2 3 4 5 6 7 8 9 10 11 # mac SET CGO_ENABLED=0 SET GOOS=darwin SET GOARCH=amd64 go build main.go #linux SET CGO_ENABLED=0 SET GOOS=linux SET GOARCH=amd64 go build main.</description></item></channel></rss>