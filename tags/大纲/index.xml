<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>大纲 - 标签 - 须远</title>
        <link>https://wxiang.cc/tags/%E5%A4%A7%E7%BA%B2/</link>
        <description>大纲 - 标签 - 须远</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>itwangxiang@gmail.com (Kim Liss)</managingEditor>
            <webMaster>itwangxiang@gmail.com (Kim Liss)</webMaster><lastBuildDate>Thu, 05 Jan 2017 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://wxiang.cc/tags/%E5%A4%A7%E7%BA%B2/" rel="self" type="application/rss+xml" /><item>
    <title>Android 开发大纲</title>
    <link>https://wxiang.cc/android/</link>
    <pubDate>Thu, 05 Jan 2017 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://wxiang.cc/android/</guid>
    <description><![CDATA[基础篇 四大组件 Activity
  生命周期
1 2 3 4 5 6  onCreate() onStart() onResume() onPause() onStop() onDestory()     启动模式
 standard singleTop singleTask singleInstance    Service
  startService
1 2 3 4  onCreate() onStartCommand() onStart() onDestroy()     bindService
1 2 3 4 5 6  bindService() onCreate() //IBinder onBind(Intent intent)() unBindService() onDestroy()     BroadcastReceiver
 作用：从 Android 系统和其他 Android 应用程序发送或接收广播消息 注册方式：静态/动态 类型  普通广播 Normal Broadcast 系统广播 System Broadcast 有序广播 Ordered Broadcast 粘性广播 Sticky Broadcast 应用内广播 Local Broadcast    Content Provider]]></description>
</item><item>
    <title>Java 开发大纲</title>
    <link>https://wxiang.cc/java/</link>
    <pubDate>Thu, 25 Aug 2016 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://wxiang.cc/java/</guid>
    <description><![CDATA[集合 非线程安全集合  List: 有序集合  ArrayList  数据结构：基于泛型数组 特点：查询速度快，增删速度慢   LinkedList  数据结构：基于链表结构 特点：查询速度慢，增删速度快     Map: 将键映射到值的双列集合  HashMap  数据结构： 基于哈希表 特点：存取无序 源码  DEFAULT_INITIAL_CAPACITY 默认为 16 MAXIMUM_CAPACITY 默认为 2 的 30 次幂 DEFAULT_LOAD_FACTOR 默认负载因子 0.75 每次会扩容长度为以前的2倍     TreeMap  有序 数据结构 -&gt; 基于红黑树   LinkedHashMap  数据结构： 基于链表和哈希表 特点：存取有序   EnumMap:  特点：枚举类型作为键值的Map   IdentityHashMap:  特点：使用 “==” 来比较引用   WeakHashMap:  特点：将键存储在 WeakReference 中 场景：用于数据缓存中     Set: 不能包含重复元素的集合  HashSet:  数据结构： 基于哈希表 特点：存取无序   TreeSet  数据结构： 基于二叉树 特点：排序   LinkedHashSet  数据结构： 基于链表和哈希表 特点：存取有序   EnumSet:  特点：值为枚举类型的Set   BitSet   Queue/Deque: 队列  ArrayDeque  特点：基于有首尾指针的数组（环形缓冲区）   PriorityQueue  特点：基于优先级的队列      线程安全集合  List  CopyOnWriteArrayList  特点：避免了多线程操作的线程安全问题 原理：先复制，再操作，最后替换 场景：用在遍历操作比更新操作多的集合，比如 listeners / observers 集合     Queue/Deque  ArrayBlockingQueue  特点：基于数组实现的一个有界阻塞队，大小不能重新定义   ConcurrentLinkedQueue  特点：基于链表实现的无界队列   DelayQueue LinkedBlockingQueue / LinkedBlockingDeque  特点：可选择有界或者无界基于链表的实现   LinkedTransferQueue  特点：基于链表的无界队列   SynchronousQueue  特点：有界队列     Map  ConcurrentHashMap ConcurrentSkipListMap  并发有序     Set  ConcurrentSkipListSet CopyOnWriteArraySet    并发 线程   创建]]></description>
</item></channel>
</rss>
